@using BlazorWasmTest.Models
@inject IJSRuntime JS

@if (project == null)
{
    <p>Project template not found...</p>
}
else
{
    <a class="card-container" href="/projects/@Index">
        <div class="card-content">
            <div class="item text-wrapper">
                <h2 class="card-title">
                    @for (int i = 0; i < titleWords?.Length; i++)
                    {
                        int multiplier = titleWords.Length - i;
                        string delay = $"{multiplier * 100}ms";
                        <span class="card-title-word" style="transition-delay: @delay">@titleWords[i]</span>
                    }
                    </h2>
                <p class="card-subtitle" style="transition-delay: 500ms">
                    @for (int i = 0; i < subtitleWords?.Length; i++)
                    {
                        string delay = $"{i * 40}ms";
                        <span class="card-subtitle-word" style="transition-delay: @delay">@subtitleWords[i]</span>
                    }
                </p>
            </div>
            <div class="item tags">
                @for (int i = 0; i < project.Tags?.Length; i++)
                {
                    int index = i + 1;
                    string delayMs = $"{index*100}ms";
                    <div class="tag" style="transition-delay: @delayMs">
                        <p>@project.Tags[i];</p>
                    </div>
                }
            </div>
        </div>
    </a>
}

@code {
    [Parameter]
    public int Index { get; set; }
    [Parameter]
    public ProjectModel? project { get; set; }
    string[]? titleWords;
    string[]? subtitleWords;

    protected override void OnInitialized()
    {
        titleWords = GetTitleWords();
        subtitleWords = GetSubtitleWords();
    }

    /*
    IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/CreateSubtitle.js");

            if (module is not null) 
            {
                subtitleWords = await module.InvokeAsync<string[]>("createSubtitle", project?.ShortDescription, Index);
            }
        }
    } */

    private string[] GetSubtitleWords()
    {
        return project?.ShortDescription?.Split(" ") ?? new string[0];
    }
    
    private string[] GetTitleWords()
    {
        return project?.Name?.Split(" ") ?? new string[0];
    }
}
